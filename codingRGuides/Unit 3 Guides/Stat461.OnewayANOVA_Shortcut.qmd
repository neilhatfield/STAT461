---
title: "One-Way ANOVA"
subtitle: "Parametric Shortcut"
author: "Neil J. Hatfield"
date-modified: now
latex-tinytex: true
format: 
  html:
    embed-resources: true
    number-sections: true
    code-annotations: below
    fig-align: center
    toc: true
    toc-depth: 4
    toc-location: right
    cap-location: top
    link-external-newwindow: true
execute: 
  echo: false
  warning: false
---

In this guide, we are going to explore using R to fit a One-way ANOVA model using the parametric shortcut known as the One-way ANOVA *F* Test. I'll interweaving a couple of different examples throughout the text. 

# Getting Ready

When getting ready to do anything in R, you'll always want to take a moment and ensure that you identify what packages and data you'll need. Then you should load those items. Again, a good habit to get into is to always start your R script (or your first code chunk) by loading packages, setting any global options, and loading data.

:::{.callout-note}
If you are using other statistical software, you might not need to load additional tools. This is highly dependent upon your choice of software.
:::

## Loading Packages in R

In this guide, we will make use of several packages. Specifically, we will use `{tidyverse}`, `{hasseDiagram}`, `{knitr}`, `{kableExtra}`, `{car}`, `{psych}`, `{parameters}`, and `{emmeans}`. You can load these packages into your session by using the `library` function either in the Console, as part of a R script, or in a code chunk towards the top of your R Markdown/Quarto file. Below is the example code that I'm running.

```{r}
#| label: loadPackages
#| echo: true
#| results: hide
# Load useful packages ----
packages <- c("tidyverse", "hasseDiagram", "knitr", "kableExtra",
              "car", "psych", "parameters", "emmeans")
lapply(
  X = packages,
  FUN = library,
  character.only = TRUE,
  quietly = TRUE
)

```

## Set Global Options

There are a couple of options that we should set at this time. These will help ensure that R works the way the we intend for *this* class. I generally set options right after I load packages.

### Set Our Constraint

Recall that we are using a particular side condition or constraint that directly relates to our factor effects: we are requiring the effects of each factor to add to zero. Mathematically that constraint looks like $$\sum_i^g\alpha_i\cdot n_i=0$$

To get R to use this constraint rather than its default, we need to run the following command:
```{r}
#| label: setConstraint
#| echo: true
# Demo code for setting the constraint ----
options(contrasts = c("contr.sum", "contr.poly"))

```

:::{.callout-warning}
If you are using another statistical software, you'll need to investigate what constraint it uses and how you change that setting (if possible). Reach out to me and I can help you.
:::

### Empty Table Cells

To make professional looking tables in a R Markdown file, I recommend using the `{knitr}` and `{kableExtra}` packages. One thing to keep in mind is that by default, `R` does not like truly empty table cells and typically prints "NA" in them. Thus, to keep our tables as uncluttered as possible, we need to instruct `R` to leave empty table cells visually empty. We can do this with the following code:

```{r}
#| label: tableOption
#| echo: true
# Demo code for controlling table options ----
# Tell Knitr to use empty space instead of NA in printed tables
options(knitr.kable.NA = "")

```

## Load Data

Once you have set the `R` options, now comes reading in data. For this guide, we're going to work with three different data sets: the Fall 2023 Song Knowledge data, data from a honey study, and data from Example 3.2 Resin Lifetimes from the Oehlert textbook. 

The following code demonstrates how we can read in the three data sets:
```{r loadData, echo=TRUE}
#| label: loadData
#| echo: true
# Demo Code for Loading Data ----
## Song Data
songData <- read.table(
  file = "https://raw.githubusercontent.com/neilhatfield/STAT461/main/dataFiles/songKnowledge_Fa23.csv",
  header = TRUE,
  sep = ","
)
### Set year to an ordered factor
songData$Year <- factor(
  x = songData$Year,
  levels = c("Junior", "Senior", "Other")
)

## Honey Data--Manual Entry
honey <- data.frame(
  Amount = c(150, 50, 100, 85, 90, 95, 130, 50, 80),
  Varietal = rep(c("Clover", "Orange Blossom", "Alfalfa"), each = 3)
)
### Set Varietal to factor (no particular order)
honey$Varietal <- as.factor(honey$Varietal)

## Resin Lifetimes Data
resin <- read.table(
  file = "https://raw.github.com/neilhatfield/STAT461/main/dataFiles/resinLifetimes.dat",
  header = TRUE,
  sep = "" # Notice the change in separator
)
#### Set temp to factor
resin$temp <- as.factor(resin$temp)

### Change the name of the y column to something more meaningful
names(resin)[which(names(resin) == "y")] <- "log10Lifetime"

```

If you want to follow along with the guide, now would be a good time to copy and run the above code in your own session of R.

## Additional Tools

Over the years I have created some additional tools which can be useful as you perform ANOVA analyses. To access them, you must first load them into your R session by running the following command either in your script or as part of your R Markdown/Quarto document:

```{r extraTools, eval=FALSE, echo=TRUE}
# Demo code for loading Neil's extra tools ----
source("https://raw.github.com/neilhatfield/STAT461/main/rScripts/ANOVATools.R")

```

This is typically the last line of code in my first code chunk of any R Markdown/Quarto file.

# Explore Your Data

At this point in time, you should engage in exploratory data analysis including creating professional looking data visualizations (I recommend using the `{ggplot2}` package) as well as looking at descriptive statistics by groups (I recommend using `{psych}` or `{dplyr}` packages). For more details on both of these topics, see the starting guides for Data Visualizations and Descriptive Statistics I've posted.

## Your Turn

Explore the data from any of the three studies OR any other data you have access to. What do you find? What do you notice?

# Is ANOVA Even Appropriate?

Recall the base requirements for One-way ANOVA are:

+ From Unit 2
  - you are working with a qualitative/categorical factor,
  - you are working with a quantitative response,
+ From Unit 3
  - you are working with an additive model,
  - you have estimable effects, and
  - you have estimable errors/residuals.

The first two requirements (from Unit 2) you can check quickly in R by using the `str` ("structure") function or by clicking on the blue circle with a white triangle to the left of each data frame's name in the Environment tab of R Studio. This is __*not*__ something that you put into any reports. Rather, this is something you should check for yourself. In essence, this is to make sure R is thinking about your data in the same way that you are.

```{r}
#| label: checkingAttributes
#| echo: true
#| eval: true
# Checking the first two base requirements
str(songData)
str(honey)
str(resin)

```

What we want to see is that for our factor(s), R has the word "`Factor`" immediately after their (column) name. For our response, we want to see either "`num`" or "`int`" after their (column) name. If we see these AND they match our expectations of the data, then we can say that we've met these two requirements.

The last three base requirements (from Unit 3) stem from the Hasse diagram. Essentially, if you can build the Hasse diagram and have positive (i.e., non-zero and non-negative) degrees of freedom everywhere, then all three of these are satisfied.

## Hasse Diagrams

Hasse diagrams can be included in your reports. The following is an example for how we might do so with the Honey study. For putting Hasse diagrams into your R Markdown/Quarto files, I recommend using the [Hasse Diagram App](https://psu-eberly.shinyapps.io/Hasse_Diagrams/) and copying the R code generated there.

### Example-Honey Study

In investigating the effect of the type of varietal (species of flower) has on the production of excess honey, we constructed the Hasse diagram in @fig-honeyHD. With our nine hives of the same species of bee, we can see that we have sufficient degrees of freedom to estimate the effects for our three levels of varietal and have degrees of freedom for our error term. Given that we're measuring our response (excess honey) in pounds, along with the additive model shown in @fig-honeyHD, a one-way ANOVA model is a valid approach.

```{r honeyHD}
#| label: fig-honeyHD
#| fig.cap: "Hasse Diagram for Honey Study"
#| fig.alt: "Hasse diagram for Honey Study"
#| fig.height: 2
#| aria-describedby: honeyHDLD
#| echo: true
# Demo Code for a Hasse Diagram ----
## The Honey Study
modelLabels <- c("1 Make Honey 1", "3 Varietal 2", "9 (Hives) 6")
modelMatrix <- matrix(
  data = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE),
  nrow = 3,
  ncol = 3,
  byrow = FALSE
)
hasseDiagram::hasse(
 data = modelMatrix,
 labels = modelLabels
)

```

```{=html}
<details id=honeyHDLD>
  <summary>Long Description</summary>
  <p>The Hasse diagram has three nodes in three levels. Nodes are sequentially connected by downwards pointing arrows.</p>
  <p>The first node at the top level says "1 Make Honey 1".</p>
  <p>The second node at the middle level says "3 Varietal 2".</p>
  <p>The third node is at the bottom level says "9 (Hives) 6".</p>
</details>
```

### Your Turn

Try creating the code (either on your own or via the app) for the Hasse diagrams for the Song Knowledge and the Resin Lifetime studies (see p. 32 of Oehlert).

# Fit the ANOVA Model

In order to check out the assumptions of the Parametric Shortcut (a.k.a. "the ANOVA *F* Test"), we first need to fit the ANOVA model in R. This will enable us to access the residuals in an easy way. I must give a word of caution here: don't look at the results of the model just yet. You must first assess all of the assumptions so that you can build your trust in the results.

To fit our ANOVA model, we will primarily use the `aov` function that is part of base R. (You can also use the `lm` function with the same arguments.) We will want to save our model to a named object so that we can call them at later times. Here is how we would build/fit the model:

```{r}
#| label: buildModels1
#| echo: true
# Demo code for building ANOVA Models ----
## Song Knowledge study
songModel <- aov( # <1>
  formula = Score ~ Year, # <2>
  data = songData, # <3>
  na.action = "na.omit" # <4>
)
```
1. We will want to save the output of the `aov` function hence why I've started this line with the name `songModel` followed by the assignment operator, `<-`.
2. The `formula` argument is how we express our model. In essence, you put in all of our factors/terms. R automatically knows to account for the first and last nodes of our Hasse diagrams (the action screen and measurement units). The structure of the formulas are `responseName ~ factorName`.
3. The `data` argument is where you tell `aov` the name of the data frame you want to use.
4. The `na.action` argument is a safety precaution. You are instructing `R` that if there is an observation with missing values, then `R` is to omit that observation from the model. (You may leave this argument off if you desire and are willing to run the risk of problems.)

The pattern of the `aov` call I used in for the Song Knowledge study is going to be the pattern that we'll want to emulate for other sets.

## Your Turn

Try to emulate the `aov` call for the Honey and Resin Lifetime Studies. When you're ready, you can check your answers below.

:::{.callout-note collapse="true"}
### Honey Study Example
```{r}
#| label: buildModels2
#| echo: true
# Demo code for building ANOVA Models ----
## Honey study
honeyModel <- aov(
  formula = Amount ~ Varietal,
  data = honey,
  na.action = "na.omit"
)
```
:::

:::{.callout-note collapse="true"}
### Resin Lifetimes Study Example
```{r}
#| label: buildModels3
#| echo: true
# Demo code for building ANOVA Models ----
## Resin Lifetime study
resinModel <- aov(
  formula = log10Lifetime ~ temp,
  data = resin,
  na.action = "na.omit"
)
```
:::

# Assessing Assumptions

Before we look at the results of fitting the ANOVA model, we must first assess the assumptions. R automatically does the parametric shortcut test when we call the results of fitting the model--regardless of whether the parametric shortcut is actually valid. Thus, we need to be convinced that we've met the assumptions of the test well enough to trust the results.

For the parametric shortcut (a.k.a. "the ANOVA *F* test"), there are three assumptions:

1) Our residuals need to follow a Gaussian distribution.
2) We have homoscedasticity (around the model) among the residuals.
3) We have Independent Observations.

We will need to access the residuals from our model. We can do this in two different ways: we can use the extractor operator, `$`, or we can use the `residuals` function. For example, `songModel$residuals` or `residuals(songModel)`. Either method will give us the same set of values to work with.

Remember, we want to *__assess not test__* our assumptions. Thus, we will be relying on specific data visualizations and a couple of descriptive statistics to help us. All of which can go into your reports.

{{< pagebreak >}}

# Code Appendix

```{r codeAppend, ref.label=knitr::all_labels(), echo=TRUE, eval=FALSE}
```